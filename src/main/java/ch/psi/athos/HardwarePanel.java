package ch.psi.athos;

import ch.psi.pshell.device.Device;
import ch.psi.pshell.epics.ChannelInteger;
import ch.psi.pshell.epics.DiscretePositioner;
import ch.psi.utils.swing.SwingUtils;
import javax.swing.DefaultComboBoxModel;

/**
 *
 */
public class HardwarePanel extends javax.swing.JPanel {

    DiscretePositioner screen;
    DiscretePositioner filter;
    Thread devicesInitTask;

    public HardwarePanel() {
        initComponents();
    }

    public void onTimer() {
        for (Device dev : new Device[]{screen, filter}) {
            if (dev != null) {
                dev.request();
            }
        }
    }

    String cameraName;
    

    public void setCamera(String cameraName) {
        this.cameraName = cameraName;

        if ((devicesInitTask != null) && (devicesInitTask.isAlive())) {
            devicesInitTask.interrupt();
        }
        if (screen != null) {
            screen.close();
            screen = null;
        }
        if (filter != null) {
            filter.close();
            filter = null;
        }
        
        
        CameraType type = CameraType.getType(cameraName);
        comboScreen.setModel(new DefaultComboBoxModel());
        comboScreen.setEnabled(false);
        comboFilter.setModel(new DefaultComboBoxModel());
        comboFilter.setEnabled(false);
        panelFilter.setVisible(type == CameraType.Electrons);
        panelScreen.setVisible(type == CameraType.Electrons); 
        
        if (cameraName!=null){            
            if (type == CameraType.Electrons) {
                //Parallelizing initialization
                devicesInitTask = new Thread(() -> {
                    try {
                        if (cameraName.contains("DSRM")) {
                            screen = new DiscretePositioner("CurrentScreen", cameraName + ":POSITION_SP", cameraName + ":POSITION");
                        } else {
                            screen = new DiscretePositioner("CurrentScreen", cameraName + ":SET_SCREEN1_POS", cameraName + ":GET_SCREEN1_POS");
                        }
                        screen.setMonitored(true);
                        screen.initialize();
                        DefaultComboBoxModel model = new DefaultComboBoxModel();
                        for (String pos : screen.getPositions()) {
                            model.addElement(pos);
                        }
                        comboScreen.setModel(model);
                        comboScreen.setSelectedItem(screen.read());

                    } catch (Exception ex) {
                        comboScreen.setModel(new DefaultComboBoxModel());
                        System.err.println(ex.getMessage());
                        screen = null;
                    }
                    comboScreen.setEnabled(screen != null);
                    valueScreen.setDevice(screen);

                    try {
                        filter = new DiscretePositioner("CurrentFilter", cameraName + ":SET_FILTER", cameraName + ":GET_FILTER");
                        filter.setMonitored(true);
                        filter.initialize();
                        DefaultComboBoxModel model = new DefaultComboBoxModel();
                        for (String pos : filter.getPositions()) {
                            model.addElement(pos);
                        }
                        comboFilter.setModel(model);
                        comboFilter.setSelectedItem(filter.read());
                    } catch (Exception ex) {
                        System.err.println(ex.getMessage());
                        filter = null;
                    }
                    comboFilter.setEnabled(filter != null);
                    valueFilter.setDevice(filter);
                });
                devicesInitTask.start();
            }
        }
    }

    public String getCamera() {
        return cameraName;
    }

    public String getScreenValue() {
        return String.valueOf(valueScreen.getLabel().getText());
    }

    public String getFilterValue() {
        return String.valueOf(valueFilter.getLabel().getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelScreen = new javax.swing.JPanel();
        valueScreen = new ch.psi.pshell.swing.DeviceValuePanel();
        comboScreen = new javax.swing.JComboBox();
        panelFilter = new javax.swing.JPanel();
        valueFilter = new ch.psi.pshell.swing.DeviceValuePanel();
        comboFilter = new javax.swing.JComboBox();

        panelScreen.setBorder(javax.swing.BorderFactory.createTitledBorder("Screen"));

        comboScreen.setEnabled(false);
        comboScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboScreenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelScreenLayout = new javax.swing.GroupLayout(panelScreen);
        panelScreen.setLayout(panelScreenLayout);
        panelScreenLayout.setHorizontalGroup(
            panelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboScreen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelScreenLayout.setVerticalGroup(
            panelScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelScreenLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(comboScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        comboFilter.setEnabled(false);
        comboFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFilterLayout = new javax.swing.GroupLayout(panelFilter);
        panelFilter.setLayout(panelFilterLayout);
        panelFilterLayout.setHorizontalGroup(
            panelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelFilterLayout.setVerticalGroup(
            panelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFilterLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(comboFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboScreenActionPerformed

        comboScreen.setEnabled(false);
        new Thread(new Runnable() {
            @Override
            public void run() {
                ChannelInteger setpoint = null;
                try {
                    int index = comboScreen.getSelectedIndex();
                    if (index >= 0) {
                        if (cameraName.contains("DSRM")) {
                            setpoint = new ChannelInteger(null, cameraName + ":POSITION_SP");
                        } else {
                            setpoint = new ChannelInteger(null, cameraName + ":SET_SCREEN1_POS");
                        }
                        setpoint.initialize();
                        Integer readback = setpoint.read();
                        if ((readback == null) || (setpoint.read() != index)) {
                            setpoint.write(index);
                        }
                        screen.read();
                    }
                } catch (Exception ex) {
                    SwingUtils.showException(HardwarePanel.this, ex);
                } finally {
                    comboScreen.setEnabled(true);
                    if (setpoint != null) {
                        setpoint.close();
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_comboScreenActionPerformed

    private void comboFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFilterActionPerformed
        try {
            String setpoint = (String) comboFilter.getSelectedItem();
            if (setpoint != null) {
                if (!setpoint.equals(filter.read())) {
                    filter.write(setpoint);
                }
            }
        } catch (Exception ex) {
            SwingUtils.showException(HardwarePanel.this, ex);
        }
    }//GEN-LAST:event_comboFilterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboFilter;
    private javax.swing.JComboBox comboScreen;
    private javax.swing.JPanel panelFilter;
    private javax.swing.JPanel panelScreen;
    private ch.psi.pshell.swing.DeviceValuePanel valueFilter;
    private ch.psi.pshell.swing.DeviceValuePanel valueScreen;
    // End of variables declaration//GEN-END:variables
}
